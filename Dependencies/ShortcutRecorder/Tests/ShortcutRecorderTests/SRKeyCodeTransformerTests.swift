//
//  Copyright 2019 ShortcutRecorder Contributors
//  CC BY 4.0
//

import XCTest

import ShortcutRecorder


class SRKeyCodeTransformerTests: XCTestCase {
    func testUserInterfaceLayoutAltersTabRendering() {
        let c = RecorderControl(frame: .zero)
        c.stringValueRespectsUserInterfaceLayoutDirection = true
        c.drawsASCIIEquivalentOfShortcut = true

        c.userInterfaceLayoutDirection = .leftToRight
        c.objectValue = Shortcut(code: KeyCode.tab, modifierFlags: [], characters: nil, charactersIgnoringModifiers: nil)
        XCTAssertEqual(c.stringValue, "\u{21E5}")

        c.userInterfaceLayoutDirection = .rightToLeft
        c.objectValue = Shortcut(code: KeyCode.tab, modifierFlags: [], characters: nil, charactersIgnoringModifiers: nil)
        XCTAssertEqual(c.stringValue, "\u{21E4}")
    }
}


class SRASCIILiteralKeyCodeTransformerTests: XCTestCase {
    func testTransform() {
        func AssertEqual(code: KeyCode, literal: String) {
            XCTContext.runActivity(named: literal) { (_) in
                XCTAssertEqual(ASCIILiteralKeyCodeTransformer.shared.transformedValue(code.rawValue as NSNumber), literal)
            }
        }

        AssertEqual(code: KeyCode.ansi0, literal: "0")
        AssertEqual(code: KeyCode.ansi1, literal: "1")
        AssertEqual(code: KeyCode.ansi2, literal: "2")
        AssertEqual(code: KeyCode.ansi3, literal: "3")
        AssertEqual(code: KeyCode.ansi4, literal: "4")
        AssertEqual(code: KeyCode.ansi5, literal: "5")
        AssertEqual(code: KeyCode.ansi6, literal: "6")
        AssertEqual(code: KeyCode.ansi7, literal: "7")
        AssertEqual(code: KeyCode.ansi8, literal: "8")
        AssertEqual(code: KeyCode.ansi9, literal: "9")
        AssertEqual(code: KeyCode.ansiA, literal: "A")
        AssertEqual(code: KeyCode.ansiB, literal: "B")
        AssertEqual(code: KeyCode.ansiBackslash, literal: #"\"#)
        AssertEqual(code: KeyCode.ansiC, literal: "C")
        AssertEqual(code: KeyCode.ansiComma, literal: ",")
        AssertEqual(code: KeyCode.ansiD, literal: "D")
        AssertEqual(code: KeyCode.ansiE, literal: "E")
        AssertEqual(code: KeyCode.ansiEqual, literal: "=")
        AssertEqual(code: KeyCode.ansiF, literal: "F")
        AssertEqual(code: KeyCode.ansiG, literal: "G")
        AssertEqual(code: KeyCode.ansiGrave, literal: "`")
        AssertEqual(code: KeyCode.ansiH, literal: "H")
        AssertEqual(code: KeyCode.ansiI, literal: "I")
        AssertEqual(code: KeyCode.ansiJ, literal: "J")
        AssertEqual(code: KeyCode.ansiK, literal: "K")
        AssertEqual(code: KeyCode.ansiKeypad0, literal: "0")
        AssertEqual(code: KeyCode.ansiKeypad1, literal: "1")
        AssertEqual(code: KeyCode.ansiKeypad2, literal: "2")
        AssertEqual(code: KeyCode.ansiKeypad3, literal: "3")
        AssertEqual(code: KeyCode.ansiKeypad4, literal: "4")
        AssertEqual(code: KeyCode.ansiKeypad5, literal: "5")
        AssertEqual(code: KeyCode.ansiKeypad6, literal: "6")
        AssertEqual(code: KeyCode.ansiKeypad7, literal: "7")
        AssertEqual(code: KeyCode.ansiKeypad8, literal: "8")
        AssertEqual(code: KeyCode.ansiKeypad9, literal: "9")
        AssertEqual(code: KeyCode.ansiKeypadDecimal, literal: ".")
        AssertEqual(code: KeyCode.ansiKeypadDivide, literal: "/")
        AssertEqual(code: KeyCode.ansiKeypadEnter, literal: KeyCodeString.return.rawValue)
        AssertEqual(code: KeyCode.ansiKeypadEquals, literal: "=")
        AssertEqual(code: KeyCode.ansiKeypadMinus, literal: "-")
        AssertEqual(code: KeyCode.ansiKeypadMultiply, literal: "*")
        AssertEqual(code: KeyCode.ansiKeypadPlus, literal: "+")
        AssertEqual(code: KeyCode.ansiL, literal: "L")
        AssertEqual(code: KeyCode.ansiLeftBracket, literal: "[")
        AssertEqual(code: KeyCode.ansiM, literal: "M")
        AssertEqual(code: KeyCode.ansiMinus, literal: "-")
        AssertEqual(code: KeyCode.ansiN, literal: "N")
        AssertEqual(code: KeyCode.ansiO, literal: "O")
        AssertEqual(code: KeyCode.ansiP, literal: "P")
        AssertEqual(code: KeyCode.ansiPeriod, literal: ".")
        AssertEqual(code: KeyCode.ansiQ, literal: "Q")
        AssertEqual(code: KeyCode.ansiQuote, literal: "'")
        AssertEqual(code: KeyCode.ansiR, literal: "R")
        AssertEqual(code: KeyCode.ansiRightBracket, literal: "]")
        AssertEqual(code: KeyCode.ansiS, literal: "S")
        AssertEqual(code: KeyCode.ansiSemicolon, literal: ";")
        AssertEqual(code: KeyCode.ansiSlash, literal: "/")
        AssertEqual(code: KeyCode.ansiT, literal: "T")
        AssertEqual(code: KeyCode.ansiU, literal: "U")
        AssertEqual(code: KeyCode.ansiV, literal: "V")
        AssertEqual(code: KeyCode.ansiW, literal: "W")
        AssertEqual(code: KeyCode.ansiX, literal: "X")
        AssertEqual(code: KeyCode.ansiY, literal: "Y")
        AssertEqual(code: KeyCode.ansiZ, literal: "Z")
        AssertEqual(code: KeyCode.delete, literal: KeyCodeString.deleteLeft.rawValue)
        AssertEqual(code: KeyCode.downArrow, literal: KeyCodeString.downArrow.rawValue)
        AssertEqual(code: KeyCode.end, literal: KeyCodeString.southeastArrow.rawValue)
        AssertEqual(code: KeyCode.escape, literal: KeyCodeString.escape.rawValue)
        AssertEqual(code: KeyCode.f1, literal: "F1")
        AssertEqual(code: KeyCode.f2, literal: "F2")
        AssertEqual(code: KeyCode.f3, literal: "F3")
        AssertEqual(code: KeyCode.f4, literal: "F4")
        AssertEqual(code: KeyCode.f5, literal: "F5")
        AssertEqual(code: KeyCode.f6, literal: "F6")
        AssertEqual(code: KeyCode.f7, literal: "F7")
        AssertEqual(code: KeyCode.f8, literal: "F8")
        AssertEqual(code: KeyCode.f9, literal: "F9")
        AssertEqual(code: KeyCode.f10, literal: "F10")
        AssertEqual(code: KeyCode.f11, literal: "F11")
        AssertEqual(code: KeyCode.f12, literal: "F12")
        AssertEqual(code: KeyCode.f13, literal: "F13")
        AssertEqual(code: KeyCode.f14, literal: "F14")
        AssertEqual(code: KeyCode.f15, literal: "F15")
        AssertEqual(code: KeyCode.f16, literal: "F16")
        AssertEqual(code: KeyCode.f17, literal: "F17")
        AssertEqual(code: KeyCode.f18, literal: "F18")
        AssertEqual(code: KeyCode.f19, literal: "F19")
        AssertEqual(code: KeyCode.f20, literal: "F20")
        AssertEqual(code: KeyCode.forwardDelete, literal: KeyCodeString.deleteRight.rawValue)
        AssertEqual(code: KeyCode.help, literal: KeyCodeString.help.rawValue)
        AssertEqual(code: KeyCode.home, literal: KeyCodeString.northwestArrow.rawValue)
        AssertEqual(code: KeyCode.isoSection, literal: "§")
        AssertEqual(code: KeyCode.jisKeypadComma, literal: KeyCodeString.jisComma.rawValue)
        AssertEqual(code: KeyCode.jisUnderscore, literal: KeyCodeString.jisUnderscore.rawValue)
        AssertEqual(code: KeyCode.jisYen, literal: KeyCodeString.jisYen.rawValue)
        AssertEqual(code: KeyCode.leftArrow, literal: KeyCodeString.leftArrow.rawValue)
        AssertEqual(code: KeyCode.pageDown, literal: KeyCodeString.pageDown.rawValue)
        AssertEqual(code: KeyCode.pageUp, literal: KeyCodeString.pageUp.rawValue)
        AssertEqual(code: KeyCode.return, literal: KeyCodeString.returnR2L.rawValue)
        AssertEqual(code: KeyCode.rightArrow, literal: KeyCodeString.rightArrow.rawValue)
        AssertEqual(code: KeyCode.space, literal: shortcutRecorderLocalizedString(forKey: "Space"))
        AssertEqual(code: KeyCode.tab, literal: KeyCodeString.tabRight.rawValue)
        AssertEqual(code: KeyCode.upArrow, literal: KeyCodeString.upArrow.rawValue)
    }

    func testReverseTransform() {
        func AssertEqual(literal: String, code: KeyCode) {
            XCTContext.runActivity(named: literal) { (_) in
                XCTAssertEqual(ASCIILiteralKeyCodeTransformer.shared.reverseTransformedValue(literal) as! UInt16, code.rawValue)
            }
        }

        AssertEqual(literal: "0", code: KeyCode.ansi0)
        AssertEqual(literal: "1", code: KeyCode.ansi1)
        AssertEqual(literal: "2", code: KeyCode.ansi2)
        AssertEqual(literal: "3", code: KeyCode.ansi3)
        AssertEqual(literal: "4", code: KeyCode.ansi4)
        AssertEqual(literal: "5", code: KeyCode.ansi5)
        AssertEqual(literal: "6", code: KeyCode.ansi6)
        AssertEqual(literal: "7", code: KeyCode.ansi7)
        AssertEqual(literal: "8", code: KeyCode.ansi8)
        AssertEqual(literal: "9", code: KeyCode.ansi9)
        AssertEqual(literal: "a", code: KeyCode.ansiA)
        AssertEqual(literal: "A", code: KeyCode.ansiA)
        AssertEqual(literal: "b", code: KeyCode.ansiB)
        AssertEqual(literal: #"\"#, code: KeyCode.ansiBackslash)
        AssertEqual(literal: "c", code: KeyCode.ansiC)
        AssertEqual(literal: ",", code: KeyCode.ansiComma)
        AssertEqual(literal: "d", code: KeyCode.ansiD)
        AssertEqual(literal: "e", code: KeyCode.ansiE)
        AssertEqual(literal: "=", code: KeyCode.ansiEqual)
        AssertEqual(literal: "f", code: KeyCode.ansiF)
        AssertEqual(literal: "g", code: KeyCode.ansiG)
        AssertEqual(literal: "`", code: KeyCode.ansiGrave)
        AssertEqual(literal: "h", code: KeyCode.ansiH)
        AssertEqual(literal: "i", code: KeyCode.ansiI)
        AssertEqual(literal: "j", code: KeyCode.ansiJ)
        AssertEqual(literal: "k", code: KeyCode.ansiK)
        AssertEqual(literal: "⌅", code: KeyCode.ansiKeypadEnter)
        AssertEqual(literal: "l", code: KeyCode.ansiL)
        AssertEqual(literal: "[", code: KeyCode.ansiLeftBracket)
        AssertEqual(literal: "m", code: KeyCode.ansiM)
        AssertEqual(literal: "-", code: KeyCode.ansiMinus)
        AssertEqual(literal: "n", code: KeyCode.ansiN)
        AssertEqual(literal: "o", code: KeyCode.ansiO)
        AssertEqual(literal: "p", code: KeyCode.ansiP)
        AssertEqual(literal: ".", code: KeyCode.ansiPeriod)
        AssertEqual(literal: "q", code: KeyCode.ansiQ)
        AssertEqual(literal: "'", code: KeyCode.ansiQuote)
        AssertEqual(literal: "r", code: KeyCode.ansiR)
        AssertEqual(literal: "]", code: KeyCode.ansiRightBracket)
        AssertEqual(literal: "s", code: KeyCode.ansiS)
        AssertEqual(literal: ";", code: KeyCode.ansiSemicolon)
        AssertEqual(literal: "/", code: KeyCode.ansiSlash)
        AssertEqual(literal: "t", code: KeyCode.ansiT)
        AssertEqual(literal: "u", code: KeyCode.ansiU)
        AssertEqual(literal: "v", code: KeyCode.ansiV)
        AssertEqual(literal: "w", code: KeyCode.ansiW)
        AssertEqual(literal: "x", code: KeyCode.ansiX)
        AssertEqual(literal: "y", code: KeyCode.ansiY)
        AssertEqual(literal: "z", code: KeyCode.ansiZ)
        AssertEqual(literal: "⌫", code: KeyCode.delete)
        AssertEqual(literal: "↓", code: KeyCode.downArrow)
        AssertEqual(literal: "↘", code: KeyCode.end)
        AssertEqual(literal: "⎋", code: KeyCode.escape)
        AssertEqual(literal: "Esc", code: KeyCode.escape)
        AssertEqual(literal: "Escape", code: KeyCode.escape)
        AssertEqual(literal: "F1", code: KeyCode.f1)
        AssertEqual(literal: "f1", code: KeyCode.f1)
        AssertEqual(literal: "F2", code: KeyCode.f2)
        AssertEqual(literal: "F3", code: KeyCode.f3)
        AssertEqual(literal: "F4", code: KeyCode.f4)
        AssertEqual(literal: "F5", code: KeyCode.f5)
        AssertEqual(literal: "F6", code: KeyCode.f6)
        AssertEqual(literal: "F7", code: KeyCode.f7)
        AssertEqual(literal: "F8", code: KeyCode.f8)
        AssertEqual(literal: "F9", code: KeyCode.f9)
        AssertEqual(literal: "F10", code: KeyCode.f10)
        AssertEqual(literal: "F11", code: KeyCode.f11)
        AssertEqual(literal: "F12", code: KeyCode.f12)
        AssertEqual(literal: "F13", code: KeyCode.f13)
        AssertEqual(literal: "F14", code: KeyCode.f14)
        AssertEqual(literal: "F15", code: KeyCode.f15)
        AssertEqual(literal: "F16", code: KeyCode.f16)
        AssertEqual(literal: "F17", code: KeyCode.f17)
        AssertEqual(literal: "F18", code: KeyCode.f18)
        AssertEqual(literal: "F19", code: KeyCode.f19)
        AssertEqual(literal: "F20", code: KeyCode.f20)
        AssertEqual(literal: "⌦", code: KeyCode.forwardDelete)
        AssertEqual(literal: "?⃝", code: KeyCode.help)
        AssertEqual(literal: "Help", code: KeyCode.help)
        AssertEqual(literal: "↖", code: KeyCode.home)
        AssertEqual(literal: "§", code: KeyCode.isoSection)
        AssertEqual(literal: "←", code: KeyCode.leftArrow)
        AssertEqual(literal: "⇟", code: KeyCode.pageDown)
        AssertEqual(literal: "⇞", code: KeyCode.pageUp)
        AssertEqual(literal: "↩", code: KeyCode.return)
        AssertEqual(literal: "Enter", code: KeyCode.return)
        AssertEqual(literal: "→", code: KeyCode.rightArrow)
        AssertEqual(literal: " ", code: KeyCode.space)
        AssertEqual(literal: "Space", code: KeyCode.space)
        AssertEqual(literal: "⇥", code: KeyCode.tab)
        AssertEqual(literal: "⇤", code: KeyCode.tab)
        AssertEqual(literal: "Tab", code: KeyCode.tab)
        AssertEqual(literal: "↑", code: KeyCode.upArrow)
        AssertEqual(literal: "＿", code: KeyCode.jisUnderscore)
        AssertEqual(literal: "、", code: KeyCode.jisKeypadComma)
        AssertEqual(literal: "¥", code: KeyCode.jisYen)
        AssertEqual(literal: "*", code: KeyCode.ansiKeypadMultiply);
        AssertEqual(literal: "+", code: KeyCode.ansiKeypadPlus);
    }
}


class SRASCIISymbolicKeyCodeTransformerTests: XCTestCase {
    func testTransform() {
        func AssertEqual(code: KeyCode, symbol: String) {
            XCTContext.runActivity(named: symbol) { (_) in
                XCTAssertEqual(ASCIISymbolicKeyCodeTransformer.shared.transformedValue(code.rawValue as NSNumber), symbol)
            }
        }

        AssertEqual(code: KeyCode.ansi0, symbol: "0")
        AssertEqual(code: KeyCode.ansi1, symbol: "1")
        AssertEqual(code: KeyCode.ansi2, symbol: "2")
        AssertEqual(code: KeyCode.ansi3, symbol: "3")
        AssertEqual(code: KeyCode.ansi4, symbol: "4")
        AssertEqual(code: KeyCode.ansi5, symbol: "5")
        AssertEqual(code: KeyCode.ansi6, symbol: "6")
        AssertEqual(code: KeyCode.ansi7, symbol: "7")
        AssertEqual(code: KeyCode.ansi8, symbol: "8")
        AssertEqual(code: KeyCode.ansi9, symbol: "9")
        AssertEqual(code: KeyCode.ansiA, symbol: "a")
        AssertEqual(code: KeyCode.ansiB, symbol: "b")
        AssertEqual(code: KeyCode.ansiBackslash, symbol: #"\"#)
        AssertEqual(code: KeyCode.ansiC, symbol: "c")
        AssertEqual(code: KeyCode.ansiComma, symbol: ",")
        AssertEqual(code: KeyCode.ansiD, symbol: "d")
        AssertEqual(code: KeyCode.ansiE, symbol: "e")
        AssertEqual(code: KeyCode.ansiEqual, symbol: "=")
        AssertEqual(code: KeyCode.ansiF, symbol: "f")
        AssertEqual(code: KeyCode.ansiG, symbol: "g")
        AssertEqual(code: KeyCode.ansiGrave, symbol: "`")
        AssertEqual(code: KeyCode.ansiH, symbol: "h")
        AssertEqual(code: KeyCode.ansiI, symbol: "i")
        AssertEqual(code: KeyCode.ansiJ, symbol: "j")
        AssertEqual(code: KeyCode.ansiK, symbol: "k")
        AssertEqual(code: KeyCode.ansiKeypad0, symbol: "0")
        AssertEqual(code: KeyCode.ansiKeypad1, symbol: "1")
        AssertEqual(code: KeyCode.ansiKeypad2, symbol: "2")
        AssertEqual(code: KeyCode.ansiKeypad3, symbol: "3")
        AssertEqual(code: KeyCode.ansiKeypad4, symbol: "4")
        AssertEqual(code: KeyCode.ansiKeypad5, symbol: "5")
        AssertEqual(code: KeyCode.ansiKeypad6, symbol: "6")
        AssertEqual(code: KeyCode.ansiKeypad7, symbol: "7")
        AssertEqual(code: KeyCode.ansiKeypad8, symbol: "8")
        AssertEqual(code: KeyCode.ansiKeypad9, symbol: "9")
        AssertEqual(code: KeyCode.ansiKeypadDecimal, symbol: ".")
        AssertEqual(code: KeyCode.ansiKeypadDivide, symbol: "/")
        AssertEqual(code: KeyCode.ansiKeypadEnter, symbol: unicharToString(unichar(NSEnterCharacter)))
        AssertEqual(code: KeyCode.ansiKeypadEquals, symbol: "=")
        AssertEqual(code: KeyCode.ansiKeypadMinus, symbol: "-")
        AssertEqual(code: KeyCode.ansiKeypadMultiply, symbol: "*")
        AssertEqual(code: KeyCode.ansiKeypadPlus, symbol: "+")
        AssertEqual(code: KeyCode.ansiL, symbol: "l")
        AssertEqual(code: KeyCode.ansiLeftBracket, symbol: "[")
        AssertEqual(code: KeyCode.ansiM, symbol: "m")
        AssertEqual(code: KeyCode.ansiMinus, symbol: "-")
        AssertEqual(code: KeyCode.ansiN, symbol: "n")
        AssertEqual(code: KeyCode.ansiO, symbol: "o")
        AssertEqual(code: KeyCode.ansiP, symbol: "p")
        AssertEqual(code: KeyCode.ansiPeriod, symbol: ".")
        AssertEqual(code: KeyCode.ansiQ, symbol: "q")
        AssertEqual(code: KeyCode.ansiQuote, symbol: "'")
        AssertEqual(code: KeyCode.ansiR, symbol: "r")
        AssertEqual(code: KeyCode.ansiRightBracket, symbol: "]")
        AssertEqual(code: KeyCode.ansiS, symbol: "s")
        AssertEqual(code: KeyCode.ansiSemicolon, symbol: ";")
        AssertEqual(code: KeyCode.ansiSlash, symbol: "/")
        AssertEqual(code: KeyCode.ansiT, symbol: "t")
        AssertEqual(code: KeyCode.ansiU, symbol: "u")
        AssertEqual(code: KeyCode.ansiV, symbol: "v")
        AssertEqual(code: KeyCode.ansiW, symbol: "w")
        AssertEqual(code: KeyCode.ansiX, symbol: "x")
        AssertEqual(code: KeyCode.ansiY, symbol: "y")
        AssertEqual(code: KeyCode.ansiZ, symbol: "z")
        AssertEqual(code: KeyCode.delete, symbol: unicharToString(unichar(NSBackspaceCharacter)))
        AssertEqual(code: KeyCode.downArrow, symbol: unicharToString(unichar(NSDownArrowFunctionKey)))
        AssertEqual(code: KeyCode.end, symbol: unicharToString(unichar(NSEndFunctionKey)))
        AssertEqual(code: KeyCode.escape, symbol: "\u{1b}")
        AssertEqual(code: KeyCode.f1, symbol: unicharToString(unichar(NSF1FunctionKey)))
        AssertEqual(code: KeyCode.f2, symbol: unicharToString(unichar(NSF2FunctionKey)))
        AssertEqual(code: KeyCode.f3, symbol: unicharToString(unichar(NSF3FunctionKey)))
        AssertEqual(code: KeyCode.f4, symbol: unicharToString(unichar(NSF4FunctionKey)))
        AssertEqual(code: KeyCode.f5, symbol: unicharToString(unichar(NSF5FunctionKey)))
        AssertEqual(code: KeyCode.f6, symbol: unicharToString(unichar(NSF6FunctionKey)))
        AssertEqual(code: KeyCode.f7, symbol: unicharToString(unichar(NSF7FunctionKey)))
        AssertEqual(code: KeyCode.f8, symbol: unicharToString(unichar(NSF8FunctionKey)))
        AssertEqual(code: KeyCode.f9, symbol: unicharToString(unichar(NSF9FunctionKey)))
        AssertEqual(code: KeyCode.f10, symbol: unicharToString(unichar(NSF10FunctionKey)))
        AssertEqual(code: KeyCode.f11, symbol: unicharToString(unichar(NSF11FunctionKey)))
        AssertEqual(code: KeyCode.f12, symbol: unicharToString(unichar(NSF12FunctionKey)))
        AssertEqual(code: KeyCode.f13, symbol: unicharToString(unichar(NSF13FunctionKey)))
        AssertEqual(code: KeyCode.f14, symbol: unicharToString(unichar(NSF14FunctionKey)))
        AssertEqual(code: KeyCode.f15, symbol: unicharToString(unichar(NSF15FunctionKey)))
        AssertEqual(code: KeyCode.f16, symbol: unicharToString(unichar(NSF16FunctionKey)))
        AssertEqual(code: KeyCode.f17, symbol: unicharToString(unichar(NSF17FunctionKey)))
        AssertEqual(code: KeyCode.f18, symbol: unicharToString(unichar(NSF18FunctionKey)))
        AssertEqual(code: KeyCode.f19, symbol: unicharToString(unichar(NSF19FunctionKey)))
        AssertEqual(code: KeyCode.f20, symbol: unicharToString(unichar(NSF20FunctionKey)))
        AssertEqual(code: KeyCode.forwardDelete, symbol: unicharToString(unichar(NSDeleteCharacter)))
        AssertEqual(code: KeyCode.help, symbol: unicharToString(unichar(NSHelpFunctionKey)))
        AssertEqual(code: KeyCode.home, symbol: unicharToString(unichar(NSHomeFunctionKey)))
        AssertEqual(code: KeyCode.isoSection, symbol: "§")
        AssertEqual(code: KeyCode.jisKeypadComma, symbol: KeyCodeString.jisComma.rawValue)
        AssertEqual(code: KeyCode.jisUnderscore, symbol: KeyCodeString.jisUnderscore.rawValue)
        AssertEqual(code: KeyCode.jisYen, symbol: KeyCodeString.jisYen.rawValue)
        AssertEqual(code: KeyCode.leftArrow, symbol: unicharToString(unichar(NSLeftArrowFunctionKey)))
        AssertEqual(code: KeyCode.pageDown, symbol: unicharToString(unichar(NSPageDownFunctionKey)))
        AssertEqual(code: KeyCode.pageUp, symbol: unicharToString(unichar(NSPageUpFunctionKey)))
        AssertEqual(code: KeyCode.return, symbol: unicharToString(unichar(NSCarriageReturnCharacter)))
        AssertEqual(code: KeyCode.rightArrow, symbol: unicharToString(unichar(NSRightArrowFunctionKey)))
        AssertEqual(code: KeyCode.space, symbol: " ")
        AssertEqual(code: KeyCode.tab, symbol: unicharToString(unichar(NSTabCharacter)))
        AssertEqual(code: KeyCode.upArrow, symbol: unicharToString(unichar(NSUpArrowFunctionKey)))
    }

    func testReverseTransform() {
        func AssertEqual(symbol: String, code: KeyCode) {
            XCTContext.runActivity(named: symbol) { (_) in
                XCTAssertEqual(ASCIISymbolicKeyCodeTransformer.shared.reverseTransformedValue(symbol) as! UInt16, code.rawValue)
            }
        }

        AssertEqual(symbol: "0", code: KeyCode.ansi0)
        AssertEqual(symbol: "1", code: KeyCode.ansi1)
        AssertEqual(symbol: "2", code: KeyCode.ansi2)
        AssertEqual(symbol: "3", code: KeyCode.ansi3)
        AssertEqual(symbol: "4", code: KeyCode.ansi4)
        AssertEqual(symbol: "5", code: KeyCode.ansi5)
        AssertEqual(symbol: "6", code: KeyCode.ansi6)
        AssertEqual(symbol: "7", code: KeyCode.ansi7)
        AssertEqual(symbol: "8", code: KeyCode.ansi8)
        AssertEqual(symbol: "9", code: KeyCode.ansi9)
        AssertEqual(symbol: "a", code: KeyCode.ansiA)
        AssertEqual(symbol: "A", code: KeyCode.ansiA)
        AssertEqual(symbol: "b", code: KeyCode.ansiB)
        AssertEqual(symbol: #"\"#, code: KeyCode.ansiBackslash)
        AssertEqual(symbol: "c", code: KeyCode.ansiC)
        AssertEqual(symbol: ",", code: KeyCode.ansiComma)
        AssertEqual(symbol: "d", code: KeyCode.ansiD)
        AssertEqual(symbol: "e", code: KeyCode.ansiE)
        AssertEqual(symbol: "=", code: KeyCode.ansiEqual)
        AssertEqual(symbol: "f", code: KeyCode.ansiF)
        AssertEqual(symbol: "g", code: KeyCode.ansiG)
        AssertEqual(symbol: "`", code: KeyCode.ansiGrave)
        AssertEqual(symbol: "h", code: KeyCode.ansiH)
        AssertEqual(symbol: "i", code: KeyCode.ansiI)
        AssertEqual(symbol: "j", code: KeyCode.ansiJ)
        AssertEqual(symbol: "k", code: KeyCode.ansiK)
        AssertEqual(symbol: unicharToString(unichar(NSEnterCharacter)), code: KeyCode.ansiKeypadEnter)
        AssertEqual(symbol: "l", code: KeyCode.ansiL)
        AssertEqual(symbol: "[", code: KeyCode.ansiLeftBracket)
        AssertEqual(symbol: "m", code: KeyCode.ansiM)
        AssertEqual(symbol: "-", code: KeyCode.ansiMinus)
        AssertEqual(symbol: "n", code: KeyCode.ansiN)
        AssertEqual(symbol: "o", code: KeyCode.ansiO)
        AssertEqual(symbol: "p", code: KeyCode.ansiP)
        AssertEqual(symbol: ".", code: KeyCode.ansiPeriod)
        AssertEqual(symbol: "q", code: KeyCode.ansiQ)
        AssertEqual(symbol: "'", code: KeyCode.ansiQuote)
        AssertEqual(symbol: "r", code: KeyCode.ansiR)
        AssertEqual(symbol: "]", code: KeyCode.ansiRightBracket)
        AssertEqual(symbol: "s", code: KeyCode.ansiS)
        AssertEqual(symbol: ";", code: KeyCode.ansiSemicolon)
        AssertEqual(symbol: "/", code: KeyCode.ansiSlash)
        AssertEqual(symbol: "t", code: KeyCode.ansiT)
        AssertEqual(symbol: "u", code: KeyCode.ansiU)
        AssertEqual(symbol: "v", code: KeyCode.ansiV)
        AssertEqual(symbol: "w", code: KeyCode.ansiW)
        AssertEqual(symbol: "x", code: KeyCode.ansiX)
        AssertEqual(symbol: "y", code: KeyCode.ansiY)
        AssertEqual(symbol: "z", code: KeyCode.ansiZ)
        AssertEqual(symbol: unicharToString(unichar(NSBackspaceCharacter)), code: KeyCode.delete)
        AssertEqual(symbol: unicharToString(unichar(NSDownArrowFunctionKey)), code: KeyCode.downArrow)
        AssertEqual(symbol: unicharToString(unichar(NSEndFunctionKey)), code: KeyCode.end)
        AssertEqual(symbol: "\u{1b}", code: KeyCode.escape)
        AssertEqual(symbol: unicharToString(unichar(NSF1FunctionKey)), code: KeyCode.f1)
        AssertEqual(symbol: unicharToString(unichar(NSF2FunctionKey)), code: KeyCode.f2)
        AssertEqual(symbol: unicharToString(unichar(NSF3FunctionKey)), code: KeyCode.f3)
        AssertEqual(symbol: unicharToString(unichar(NSF4FunctionKey)), code: KeyCode.f4)
        AssertEqual(symbol: unicharToString(unichar(NSF5FunctionKey)), code: KeyCode.f5)
        AssertEqual(symbol: unicharToString(unichar(NSF6FunctionKey)), code: KeyCode.f6)
        AssertEqual(symbol: unicharToString(unichar(NSF7FunctionKey)), code: KeyCode.f7)
        AssertEqual(symbol: unicharToString(unichar(NSF8FunctionKey)), code: KeyCode.f8)
        AssertEqual(symbol: unicharToString(unichar(NSF9FunctionKey)), code: KeyCode.f9)
        AssertEqual(symbol: unicharToString(unichar(NSF10FunctionKey)), code: KeyCode.f10)
        AssertEqual(symbol: unicharToString(unichar(NSF11FunctionKey)), code: KeyCode.f11)
        AssertEqual(symbol: unicharToString(unichar(NSF12FunctionKey)), code: KeyCode.f12)
        AssertEqual(symbol: unicharToString(unichar(NSF13FunctionKey)), code: KeyCode.f13)
        AssertEqual(symbol: unicharToString(unichar(NSF14FunctionKey)), code: KeyCode.f14)
        AssertEqual(symbol: unicharToString(unichar(NSF15FunctionKey)), code: KeyCode.f15)
        AssertEqual(symbol: unicharToString(unichar(NSF16FunctionKey)), code: KeyCode.f16)
        AssertEqual(symbol: unicharToString(unichar(NSF17FunctionKey)), code: KeyCode.f17)
        AssertEqual(symbol: unicharToString(unichar(NSF18FunctionKey)), code: KeyCode.f18)
        AssertEqual(symbol: unicharToString(unichar(NSF19FunctionKey)), code: KeyCode.f19)
        AssertEqual(symbol: unicharToString(unichar(NSF20FunctionKey)), code: KeyCode.f20)
        AssertEqual(symbol: unicharToString(unichar(NSDeleteCharacter)), code: KeyCode.forwardDelete)
        AssertEqual(symbol: unicharToString(unichar(NSHelpFunctionKey)), code: KeyCode.help)
        AssertEqual(symbol: unicharToString(unichar(NSHomeFunctionKey)), code: KeyCode.home)
        AssertEqual(symbol: "§", code: KeyCode.isoSection)
        AssertEqual(symbol: unicharToString(unichar(NSLeftArrowFunctionKey)), code: KeyCode.leftArrow)
        AssertEqual(symbol: unicharToString(unichar(NSPageDownFunctionKey)), code: KeyCode.pageDown)
        AssertEqual(symbol: unicharToString(unichar(NSPageUpFunctionKey)), code: KeyCode.pageUp)
        AssertEqual(symbol: unicharToString(unichar(NSCarriageReturnCharacter)), code: KeyCode.return)
        AssertEqual(symbol: unicharToString(unichar(NSRightArrowFunctionKey)), code: KeyCode.rightArrow)
        AssertEqual(symbol: " ", code: KeyCode.space)
        AssertEqual(symbol: unicharToString(unichar(NSTabCharacter)), code: KeyCode.tab)
        AssertEqual(symbol: unicharToString(unichar(NSBackTabCharacter)), code: KeyCode.tab)
        AssertEqual(symbol: unicharToString(unichar(NSUpArrowFunctionKey)), code: KeyCode.upArrow)
        AssertEqual(symbol: "＿", code: KeyCode.jisUnderscore)
        AssertEqual(symbol: "、", code: KeyCode.jisKeypadComma)
        AssertEqual(symbol: "¥", code: KeyCode.jisYen)
        AssertEqual(symbol: "*", code: KeyCode.ansiKeypadMultiply);
        AssertEqual(symbol: "+", code: KeyCode.ansiKeypadPlus);
    }
}
